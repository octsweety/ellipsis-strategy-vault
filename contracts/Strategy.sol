//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "./interfaces/IUniswapRouter.sol";
import "./libraries/SafeERC20.sol";
import "./libraries/SafeMath.sol";
import "./libraries/ERC20.sol";
import "./libraries/Ownable.sol";
import "./libraries/Pausable.sol";

interface ILpStaker {
    function poolInfo(uint256 _pid) external view returns (address, uint256, uint256, uint256, uint256);
    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);
    function claimableReward(uint256 _pid, address _user) external view returns (uint256);
    function deposit(uint256 _pid, uint256 _amount) external;
    function withdraw(uint256 _pid, uint256 _amount) external;
    function emergencyWithdraw(uint256 _pid) external;
    function claim(uint256[] calldata _pids) external;
}

interface IMultiFeeDistribution {
    function exit() external;
    function withdrawableBalance(
        address user
    ) view external returns (
        uint256 amount,
        uint256 penalties
    );
}

interface IEpsLP {
    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external;
}

/**
 * @dev Implementation of a strategy to get yields from farming 3Pool on Ellipsis.
 */
contract WaultEllipsisStrategy is Ownable, Pausable {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    /**
     * @dev Tokens Used:
     * {wbnb, busd} - Required for liquidity routing when doing swaps.
     * {eps} - Token generated by staking our funds. In this case it's the EPS token.
     * {bifi} - BeefyFinance token, used to send funds to the treasury.
     * {want} - Token that the strategy maximizes. The same token that users deposit in the vault. 3eps BUSD/USDT/USDC
     */
    address constant public wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    address constant public busd = address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    address constant public eps  = address(0xA7f552078dcC247C2684336020c03648500C6d9F);
    address constant public bifi = address(0xCa3F508B8e4Dd382eE878A314789373D80A5190A);
    address constant public want = address(0xaF4dE8E872131AE328Ce21D909C74705d3Aaf452);

    /**
     * @dev Third Party Contracts:
     * {unirouter} - PancakeSwap unirouter
     * {stakingPool} - LpTokenStaker contract
     * {feeDistribution} - MultiFeeDistribution contract
     * {poolLP} - 3Pool LP contract to deposit BUSD/USDC/USDT and mint {want}
     * {poolId} - LpTokenStaker pool id
     */
    address constant public unirouter       = address(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);
    address constant public stakingPool     = address(0xcce949De564fE60e7f96C85e55177F8B9E4CF61b);
    address constant public feeDistribution = address(0x4076CC26EFeE47825917D0feC3A79d0bB9a6bB5c);
    address constant public poolLp          = address(0x160CAed03795365F3A589f10C379FfA7d75d4E76);
    uint8 constant public poolId = 1;

    /**
     * @dev Beefy Contracts:
     * {rewards} - Reward pool where the strategy fee earnings will go.
     * {treasury} - Address of the BeefyFinance treasury
     * {vault} - Address of the vault that controls the strategy's funds.
     * {strategist} - Address of the strategy author/deployer where strategist fee will go.
     */
    address constant public rewards  = address(0xC627D743B1BfF30f853AE218396e6d47a4f34ceA);
    address constant public treasury = address(0xC627D743B1BfF30f853AE218396e6d47a4f34ceA);
    address public vault;
    address public strategist = address(0xC627D743B1BfF30f853AE218396e6d47a4f34ceA);

    /**
     * @dev Distribution of fees earned. This allocations relative to the % implemented on doSplit().
     * Current implementation separates 4.5% for fees.
     *
     * {REWARDS_FEE} - 3% goes to Wault holders through the {rewards} pool.
     * {CALL_FEE} - 0.5% goes to whoever executes the harvest function as gas subsidy.
     * {TREASURY_FEE} - 0.5% goes to the treasury.
     * {MAX_FEE} - Aux const used to safely calc the correct amounts.
     *
     * {WITHDRAWAL_FEE} - Fee taxed when a user withdraws funds. 10 === 0.1% fee.
     * {WITHDRAWAL_MAX} - Aux const used to safely calc the correct amounts.
     */
    uint constant public REWARDS_FEE    = 300;
    uint constant public CALL_FEE       = 50;
    uint constant public TREASURY_FEE   = 50;
    uint constant public MAX_FEE        = 400;

    uint constant public WITHDRAWAL_FEE = 10;
    uint constant public WITHDRAWAL_MAX = 10000;

    uint public maxGasPrice = 10000000000; // 10 gwei

    /**
     * @dev Routes we take to swap tokens using PancakeSwap.
     * {epsToWbnbRoute} - Route we take to go from {eps} into {wbnb}.
     * {wbnbToBifiRoute} - Route we take to go from {wbnb} into {bifi}.
     * {epsToBusdRoute} - Route we take to get from {eps} into {busd}.
     */
    address[] public epsToWbnbRoute  = [eps, wbnb];
    address[] public wbnbToBifiRoute = [wbnb, bifi];
    address[] public epsToBusdRoute  = [eps, wbnb, busd];

    /**
     * @dev Event that is fired each time someone harvests the strat.
     */
    event StratHarvest(address indexed harvester);

    modifier gasThrottle() {
        require(tx.gasprice <= maxGasPrice, "gas is too high!");
        _;
    }

    /**
     * @dev Initializes the strategy with the token to maximize.
     */
    constructor(address _vault) {
        vault = _vault;

        IERC20(want).safeApprove(stakingPool, type(uint).max);
        IERC20(eps).safeApprove(unirouter, type(uint).max);
        IERC20(wbnb).safeApprove(unirouter, type(uint).max);
        IERC20(busd).safeApprove(poolLp, type(uint).max);
    }

    /**
     * @dev Function that puts the funds to work.
     * It gets called whenever someone deposits in the strategy's vault contract.
     * It deposits {want} in the Pool to farm {eps}
     */
    function deposit() public whenNotPaused {
        uint256 wantBal = IERC20(want).balanceOf(address(this));

        if (wantBal > 0) {
            ILpStaker(stakingPool).deposit(poolId, wantBal);
        }
    }

    /**
     * @dev Withdraws funds and sends them back to the vault.
     * It withdraws {want} from the Pool.
     * The available {want} minus fees is returned to the vault.
     */
    function withdraw(uint256 _amount) external {
        require(msg.sender == vault, "!vault");

        uint256 wantBal = IERC20(want).balanceOf(address(this));

        if (wantBal < _amount) {
            ILpStaker(stakingPool).withdraw(poolId, _amount.sub(wantBal));
            wantBal = IERC20(want).balanceOf(address(this));
        }

        if (wantBal > _amount) {
            wantBal = _amount;
        }

        if (tx.origin == owner()) {
            IERC20(want).safeTransfer(vault, wantBal);
        } else {
            uint256 withdrawalFee = wantBal.mul(WITHDRAWAL_FEE).div(WITHDRAWAL_MAX);
            IERC20(want).safeTransfer(vault, wantBal.sub(withdrawalFee));
        }
    }

    /**
     * @dev Core function of the strat, in charge of collecting and re-investing rewards.
     * 1. It claims rewards from the Pool.
     * 2. It charges the system fees to simplify the split.
     * 3. It swaps the {eps} token for {busd}.
     * 4. Adds more liquidity to the pool.
     * 5. It deposits the new LP tokens.
     */
    function harvest() external whenNotPaused gasThrottle {
        require(!Address.isContract(msg.sender), "!contract");

        uint256[] memory pids = new uint256[](1);
        pids[0] = poolId;
        ILpStaker(stakingPool).claim(pids);
        IMultiFeeDistribution(feeDistribution).exit();

        chargeFees();
        swapRewards();
        deposit();

        emit StratHarvest(msg.sender);
    }

    function claimableReward() external view returns (uint256) {
        return ILpStaker(stakingPool).claimableReward(poolId, address(this));
    }

    function harvestableReward() external view returns (uint256 amount, uint256 penalties) {
        (amount, penalties) = IMultiFeeDistribution(feeDistribution).withdrawableBalance(address(this));
    }

    /**
     * @dev Takes out 4% as system fees from the rewards.
     * 0.5% -> Call Fee
     * 0.5% -> Treasury fee
     * 3.0% -> Wault Holders
     */
    function chargeFees() internal {
        uint256 toWbnb = IERC20(eps).balanceOf(address(this)).mul(40).div(1000);
        IUniswapRouter(unirouter).swapExactTokensForTokens(toWbnb, 0, epsToWbnbRoute, address(this), block.timestamp.add(600));

        uint256 wbnbBal = IERC20(wbnb).balanceOf(address(this));

        uint256 callFee = wbnbBal.mul(CALL_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(msg.sender, callFee);

        uint256 treasuryFee = wbnbBal.mul(TREASURY_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(treasury, treasuryFee);

        uint256 rewardsFee = wbnbBal.mul(REWARDS_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(rewards, rewardsFee);
    }

    /**
     * @dev Swaps {eps} rewards earned for {busd} and adds to 3Pool LP.
     */
    function swapRewards() internal {
        uint256 epsBal = IERC20(eps).balanceOf(address(this));
        IUniswapRouter(unirouter).swapExactTokensForTokens(epsBal, 0, epsToBusdRoute, address(this), block.timestamp.add(600));

        uint256 busdBal = IERC20(busd).balanceOf(address(this));
        uint256[3] memory amounts = [busdBal, 0, 0];
        IEpsLP(poolLp).add_liquidity(amounts, 0);
    }

    /**
     * @dev Function to calculate the total underlying {want} held by the strat.
     * It takes into account both the funds in hand, as the funds allocated in the Pool.
     */
    function balanceOf() public view returns (uint256) {
        return balanceOfWant().add(balanceOfPool());
    }

    /**
     * @dev It calculates how much {want} the contract holds.
     */
    function balanceOfWant() public view returns (uint256) {
        return IERC20(want).balanceOf(address(this));
    }

    /**
     * @dev It calculates how much {want} the strategy has allocated in the Pool
     */
    function balanceOfPool() public view returns (uint256) {
        (uint256 _amount, ) = ILpStaker(stakingPool).userInfo(poolId, address(this));
        return _amount;
    }

    /**
     * @dev Function that has to be called as part of strat migration. It sends all the available funds back to the
     * vault, ready to be migrated to the new strat.
     */
    function retireStrat() external {
        require(msg.sender == vault, "!vault");

        ILpStaker(stakingPool).emergencyWithdraw(poolId);

        uint256 pairBal = IERC20(want).balanceOf(address(this));
        IERC20(want).transfer(vault, pairBal);
    }

    /**
     * @dev Pauses deposits. Withdraws all funds from the Pool, leaving rewards behind
     */
    function panic() public onlyOwner {
        pause();
        ILpStaker(stakingPool).emergencyWithdraw(poolId);
    }

    /**
     * @dev Pauses the strat.
     */
    function pause() public onlyOwner {
        _pause();

        IERC20(want).safeApprove(stakingPool, 0);
        IERC20(eps).safeApprove(unirouter, 0);
        IERC20(wbnb).safeApprove(unirouter, 0);
        IERC20(busd).safeApprove(poolLp, 0);
    }

    /**
     * @dev Unpauses the strat.
     */
    function unpause() external onlyOwner {
        _unpause();

        IERC20(want).safeApprove(stakingPool, type(uint).max);
        IERC20(eps).safeApprove(unirouter, type(uint).max);
        IERC20(wbnb).safeApprove(unirouter, type(uint).max);
        IERC20(busd).safeApprove(poolLp, type(uint).max);
    }

    function setMaxGasPrice(uint _maxGasPrice) external onlyOwner {
        maxGasPrice = _maxGasPrice;
    }

    /**
     * @dev Updates address where strategist fee earnings will go.
     * @param _strategist new strategist address.
     */
    function setStrategist(address _strategist) external {
        require(msg.sender == strategist, "!strategist");
        strategist = _strategist;
    }
}